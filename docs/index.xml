<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech Kitchen</title>
    <link>/</link>
    <description>Recent content on Tech Kitchen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Oct 2018 20:32:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Composing dynamic queries with ecto</title>
      <link>/post/elixir-dynamic-queries-with-ecto/</link>
      <pubDate>Thu, 18 Oct 2018 20:32:00 +0000</pubDate>
      
      <guid>/post/elixir-dynamic-queries-with-ecto/</guid>
      <description>I was recently working on a project where I needed to compose a dynamic query for filtering a table using ecto. The filter parameters are coming from a graphql resolver.
# ~/query.ex #A sample filter input filter_input = %{status: &amp;#34;AVAILABLE&amp;#34;, genre: &amp;#34;Comedy&amp;#34;, last_update_gte: &amp;#34;2018-10-18 00:00:00&amp;#34;, last_update_lte: &amp;#34;2018-10-18 23:59:59&amp;#34; } #The schema I will be querying defmodule Movies do use Ecto.Schema schema &amp;#34;movies&amp;#34; do field(:genre, :string) field(:status, :string) timestamps() end end #My resolver function defmodule MovieFilter do import Ecto.</description>
    </item>
    
    <item>
      <title>Testing with Mocks</title>
      <link>/post/elixir-tests-with-mocks/</link>
      <pubDate>Tue, 08 May 2018 21:50:00 -0400</pubDate>
      
      <guid>/post/elixir-tests-with-mocks/</guid>
      <description>The situation was that, I needed to mock multiple external service within my application in order to test my application.
These external services are being consumed using HTTPPoison the popular elixir http client. The mock is achieved using the Mock library
# ~/multi_mocks.exs Import Mock #Mock multiple functions of the same module test &amp;#34;Test special service that will call other supporting endpoints&amp;#34; do with_mock( HTTPoison, post!: fn endpoint_a, _, _ -&amp;gt; %HTTPoison.</description>
    </item>
    
    <item>
      <title>Elixir Telegram Bot</title>
      <link>/post/elixir-telegram-bot/</link>
      <pubDate>Wed, 27 Dec 2017 21:40:13 -0400</pubDate>
      
      <guid>/post/elixir-telegram-bot/</guid>
      <description>The quest was to develop a telegram bot over 24hrs, during an office hackathon event.
I started out consulting documentation.
Bot interaction was implemented as a GenServer named ConversationTree
defmodule TelegramService.ConversationTree do use GenServer def start_link(name, conversation \\ %{message: [], response: [], tickets: []}) do {:ok, _} = GenServer.start_link(__MODULE__, conversation, name: name) name end def lookup(name) do GenServer.whereis(name) end def kill(name) do GenServer.stop(name) end def write_message(name, message = %{}) do GenServer.</description>
    </item>
    
    <item>
      <title>Testing a phoenix controller</title>
      <link>/post/elixir-controller-testing/</link>
      <pubDate>Wed, 25 Oct 2017 09:47:13 -0400</pubDate>
      
      <guid>/post/elixir-controller-testing/</guid>
      <description>The snippet below is a phoenix framework controller test
defmodule PaymentServiceWeb.Controllers.PaymentTest do use ExUnit.Case, async: false use Plug.Test alias PaymentServiceWeb.Router @tag endpoint: true test &amp;#34;service health check&amp;#34; do conn = conn(:get, &amp;#34;/api&amp;#34;) response = Router.call(conn, @opts) assert %Plug.Conn{resp_body: body} = response end end Explanation The test above is going to test an api endpoint, and the simple assertion is just to ensure that a %Plug.Conn struct is received as the response.</description>
    </item>
    
    <item>
      <title>List of amazing elixir resource</title>
      <link>/post/elixir-libraries/</link>
      <pubDate>Thu, 05 Oct 2017 23:44:13 -0400</pubDate>
      
      <guid>/post/elixir-libraries/</guid>
      <description>Here is an amazing list of handy libraries to use for elixir development.
I have personally used the rsa_ex library which made the list in one of my projects.
This can come handy in your next project.
Share.</description>
    </item>
    
    <item>
      <title>Recursion in elixir</title>
      <link>/post/elixir-recursion/</link>
      <pubDate>Thu, 21 Sep 2017 17:29:13 -0400</pubDate>
      
      <guid>/post/elixir-recursion/</guid>
      <description>I am new to elixir, and I find this interesting at the time of writing, I am coming from NodeJs :)
The major ingredients of recursion are:
 An exercise to perform repeatedly, A condition to break off the repeated exercise  Lets say we want to write a function that will return building identifiers where restaurants have not yet closed. The first argument is the current hour as integer, the second argument is the current minute as integer, the third argument is the list of restaurants containing; the name of the canteen, building identifier, closing hour, closing minute.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Fri, 15 Sep 2017 12:35:37 +0200</pubDate>
      
      <guid>/about/</guid>
      <description>Hi, I&amp;rsquo;m Gabriel, a software developer from Nigeria.
I studied Msc. Software Engineering in University of Tartu, Estonia.
I work fulltime in Tallinn, Estonia.
I Play FIFA and follow NBA.
 </description>
    </item>
    
    <item>
      <title>Elixir capture(&amp;) command</title>
      <link>/post/elixir-capture-command/</link>
      <pubDate>Thu, 14 Sep 2017 21:56:13 -0400</pubDate>
      
      <guid>/post/elixir-capture-command/</guid>
      <description>I intend to explain the usage of the capture (&amp;amp;) command in elixir for newbies like myself, base on my understanding at this point :). It is barely 2 weeks since I started writing elixir as at the writing of this post, coming from node.js.
The first time I came across the syntax below, I wondered what the f**k is happening here, but I after a while I grab it, thanks to google.</description>
    </item>
    
    <item>
      <title>Ecto order_by text field</title>
      <link>/post/ecto-order-by-text-field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/ecto-order-by-text-field/</guid>
      <description>This post demonstrates how to order an ecto query by a text field. by sending the order raw sql query through Ecto.Query.API.fragment/1
Sample table Assuming we want to query a table containing a list of scheduled jobs with known statuses. e.g RUNNING, PENDING, COMPLETED, FAILED
   id task_ref status last_exec_timestamp     1 2232323 PENDING 1605726253   2 2232324 FAILED 1605726153   4 2232326 RUNNING 1605726233   5 2232326 RUNNING 1605726233   6 2232326 FAILED 1605726233   7 2232326 COMPLETED 1605726233   8 2232326 FAILED 1605726233    Our objective is to:</description>
    </item>
    
  </channel>
</rss>
