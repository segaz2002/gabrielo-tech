<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on Gabriel Kolawole</title>
    <link>/tags/testing/</link>
    <description>Recent content in testing on Gabriel Kolawole</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 May 2018 21:50:00 -0400</lastBuildDate><atom:link href="/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing with Mocks</title>
      <link>/post/elixir-tests-with-mocks/</link>
      <pubDate>Tue, 08 May 2018 21:50:00 -0400</pubDate>
      
      <guid>/post/elixir-tests-with-mocks/</guid>
      <description>The situation was that, I needed to mock multiple external service within my application in order to test my application.
These external services are being consumed using HTTPPoison the popular elixir http client. The mock is achieved using the Mock library
# ~/multi_mocks.exs Import Mock #Mock multiple functions of the same module test &amp;#34;Test special service that will call other supporting endpoints&amp;#34; do with_mock( HTTPoison, post!: fn endpoint_a, _, _ -&amp;gt; %HTTPoison.</description>
    </item>
    
    <item>
      <title>Testing a phoenix controller</title>
      <link>/post/elixir-controller-testing/</link>
      <pubDate>Wed, 25 Oct 2017 09:47:13 -0400</pubDate>
      
      <guid>/post/elixir-controller-testing/</guid>
      <description>The snippet below is a phoenix framework controller test
defmodule PaymentServiceWeb.Controllers.PaymentTest do use ExUnit.Case, async: false use Plug.Test alias PaymentServiceWeb.Router @tag endpoint: true test &amp;#34;service health check&amp;#34; do conn = conn(:get, &amp;#34;/api&amp;#34;) response = Router.call(conn, @opts) assert %Plug.Conn{resp_body: body} = response end end Explanation The test above is going to test an api endpoint, and the simple assertion is just to ensure that a %Plug.Conn struct is received as the response.</description>
    </item>
    
  </channel>
</rss>
